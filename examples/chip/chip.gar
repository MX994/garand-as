# Image buffer printing test.
# If this works, we get an A.
# Right?

# Destination Address Register (1 << 12 = 2^12)
    XOR     R0, R0, R0
    ADDI    R0, R0, #1
    XOR     R4, R4, R4
    ADDI    R4, R4, #12
    LSL     R0, R0, R4
# Pixel Buffer Address (0x90000)
    XOR     R1, R1, R1
    ADDI    R1, R1, #144
    XOR     R4, R4, R4
    ADDI    R4, R4, #12
    LSL     R1, R1, R4
# Pixel Buffer Size
    XOR     R2, R2, R2
    ADDI    R2, R2, #255
    ADDI    R2, R2, #1
    MULI    R2, R2, #192
# Curr Pixel Index.
    XOR     R3, R3, R3

# Program start!
def begin_loop
    # Check if we are at the end of the buffer.
    # If so, go to end.
    CMP     R2, R3
    B.HS    end_loop
    # Else, write.
    # Gonna use R4 as Wk register.
    MREAD   R4, R1, R3
    MWRITE  R4, R0, R3
    # Increment counter.
    ADDI    R3, R3, #8
    B.AL    begin_loop

def end_loop
# Man, we really need a break.
# No pun intended.

# Data.
.incbin 'examples/chip/chip.bin' 0x90000